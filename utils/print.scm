(define (send-object object)
    (send-json
        (dict->json
            `((type editor)
              (string ,(write-to-string object))
              (latex ,(let ((latex (ignore-errors (lambda () (expression->tex-string object)))))
                        (if (string? latex) latex #f)))))))

(define (latex/repl-write object s-expression environment repl)
  (let* ((port (cmdl/port repl))
	     (edwin? (edwin-port? port)))
     (define (maybe-message val)
        (if edwin? (edwin/transcript-write val #f)))
    (define (simplifiable object)
      (prepare-for-printing object simplify)
      (let ((val (*last-expression-printed*)))
        (send-object val)
        (if ((disjunction symbol? number?) val)
            (print-unsimplifiable val #f)
            (begin (display "#|\n" port)
               (pp val port)
               (display "|#\n" port)
               (maybe-message val)))))
    (define (print-unsimplifiable object #!optional send)
      (if send (send-object object))
      (display "#| " port)
      (write object port environment)
      (display " |#\n" port)
      (maybe-message object))
    (cond
        ((unsimplifiable? object)
           (if (undefined-value? object)
               (begin (newline port)
                          (display ";No return value." port)
                  (maybe-message object))
               (print-unsimplifiable object)))
        ((or (symbol? object) (list? object) (vector? object) (procedure? object))
	       (simplifiable object))
        ((record? object)
           (simplifiable
           `(*record*
              ,(record-type-name (record-type-descriptor object))
              ,@(record-description object))))
	    (else (print-unsimplifiable object)))))

(set! hook/repl-write latex/repl-write)
